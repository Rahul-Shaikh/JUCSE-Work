/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.24
 * Generated at: 2019-10-20 10:02:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import travel.DAO;

public final class flights_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("travel.DAO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\r\n");
      out.write("\r\n");
      out.write("<!-- Latest compiled and minified CSS -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css\">\r\n");
      out.write("\r\n");
      out.write("<!-- jQuery library -->\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- Latest compiled JavaScript -->\r\n");
      out.write("<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("\r\n");
      out.write("\t.flight{\r\n");
      out.write("\t\twidth: 100%;\r\n");
      out.write("\t\ttext-align: center;\r\n");
      out.write("\t\tmargin: 20px;\r\n");
      out.write("\t\tpadding: 5px;\r\n");
      out.write("\r\n");
      out.write("\t\tborder: solid;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\ttable{\r\n");
      out.write("\t\twidth: 100%;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tth {\r\n");
      out.write("  \t\tbackground-color: #4CAF50;\r\n");
      out.write("  \t\tcolor: white;\r\n");
      out.write("  \t\tfont-size: 15px;\r\n");
      out.write("\t}\r\n");
      out.write("\tth, td {\r\n");
      out.write("\t  padding: 15px;\r\n");
      out.write("\t  text-align: center;\r\n");
      out.write("\t  border-bottom: 1px solid #ddd;\r\n");
      out.write("\t}\r\n");
      out.write("\ttr:nth-child(even) {background-color: #f2f2f2;}\r\n");
      out.write("\r\n");
      out.write("\t.company{\r\n");
      out.write("\t\tfont-size: 20px;\r\n");
      out.write("\t\tfont-family: serif;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t.time{\r\n");
      out.write("\t\tfont-size: 25px;\r\n");
      out.write("\t\tfont-family: sans-serif;\r\n");
      out.write("\t\tfont-weight: 100;\r\n");
      out.write("\t}\r\n");
      out.write("\t.city{\r\n");
      out.write("\t\tfont-size: 20px;\r\n");
      out.write("\t\tfont-family: serif;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t.actual-price{\r\n");
      out.write("\t\tfont-size: 27px;\r\n");
      out.write("\t\tfont-family: sans-serif;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t.actual-price-discount{\r\n");
      out.write("\t\tfont-size: 23px;\r\n");
      out.write("\t\tfont-family: sans-serif;\r\n");
      out.write("\t\ttext-decoration: line-through;\r\n");
      out.write("\t\tcolor: grey;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t.price-discount{\r\n");
      out.write("\t\tcolor: green;\r\n");
      out.write("\t\tfont-size: 25px;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t.num-stops{\r\n");
      out.write("\t\tcolor:blue;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t.error{\r\n");
      out.write("\t\ttext-align: center;\r\n");
      out.write("\t\tfont-size: 30px;\r\n");
      out.write("\t\tfont-family: serif;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t.duration{\r\n");
      out.write("\t\tfont-size: 27px;\r\n");
      out.write("\t\tfont-family: sans-serif;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t.stop-list{\r\n");
      out.write("\t\tcolor: grey;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<title>Flights</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div class=\"list\">\r\n");
      out.write("\r\n");
      out.write("\r\n");

String url,user,pass;
url="jdbc:mysql://localhost:3306/travel";
System.out.println(url);
user="root";
pass="";

DAO dao=new DAO(url,user,pass); 

ResultSet rs=(ResultSet)request.getAttribute("flights");
ResultSet rs2;
	
if(rs==null)
{
      out.write("\r\n");
      out.write("\t<div class=\"error\">Sorry!!! No flights found</div>\r\n");
 }

else
{
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<table>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>Flight</th>\r\n");
      out.write("\t\t\t<th>Departure</th>\r\n");
      out.write("\t\t\t<th>Duration</th>\r\n");
      out.write("\t\t\t<th>Arrival</th>\r\n");
      out.write("\t\t\t<th>Price</th>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t");

	do
	{

		String disc= rs.getString("discount");
		String act_price= rs.getString("price");

		int discount=0;
		int a_price=Integer.parseInt(act_price);
		int d_price=0;
		if(disc!=null)
		{
			discount=Integer.parseInt(disc);
			d_price=(int)((double)a_price*(100.0-(double)discount)/100.0);
		}
		String disc_price=Integer.toString(d_price);

		
      out.write("\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>\r\n");
      out.write("\t\t\t\t<div class=\"company\">\r\n");
      out.write("\t\t\t\t\t<strong>");
      out.print(rs.getString("company"));
      out.write("</strong><br>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t \t");
      out.print(rs.getString("flight_num"));
      out.write("\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t<td>\r\n");
      out.write("\t\t\t\t<div class=\"time\">\r\n");
      out.write("\t\t\t\t\t");

					String dept_time=rs.getString("dept_time");
					dept_time=dept_time.substring(0,dept_time.lastIndexOf(':'));
					
      out.write("\r\n");
      out.write("\t\t\t\t\t<strong>");
      out.print(dept_time);
      out.write("</strong><br>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"city\">\r\n");
      out.write("\t\t\t\t\t");
      out.print(rs.getString("src_city"));
      out.write("\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t<td>\r\n");
      out.write("\t\t\t\t<div class=\"duration\">\r\n");
      out.write("\t\t\t\t\t");

					if(rs.getString("dur_hrs").compareTo("0")!=0)
					{
      out.write("\r\n");
      out.write("\t\t\t\t\t\t<strong>");
      out.print(rs.getString("dur_hrs"));
      out.write("h </strong>\r\n");
      out.write("\t\t\t\t\t");
}
					if(rs.getString("dur_min").compareTo("0")!=0)
					{
      out.write("\r\n");
      out.write("\t\t\t\t\t\t<strong>");
      out.print(rs.getString("dur_min"));
      out.write("m </strong>\r\n");
      out.write("\t\t\t\t\t");
}
      out.write("\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"num-stops\">\r\n");
      out.write("\t\t\t\t\t");

					if(rs.getString("num_stops").compareTo("0")==0)
					{
      out.write("\r\n");
      out.write("\t\t\t\t\t\tNon stop\r\n");
      out.write("\t\t\t\t\t");
}	
					else
					{
      out.write("\r\n");
      out.write("\t\t\t\t\t\t");
      out.print(rs.getString("num_stops"));
      out.write(" stop(s)\r\n");
      out.write("\t\t\t\t\t\t<div class=\"stop-list\">\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t");

							rs2=dao.getStops(rs.getString("id"));
							do{
								if(Integer.parseInt(rs2.getString("stop_no"))<Integer.parseInt(rs.getString("num_stops"))){
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t");
      out.print(rs2.getString("dest_city"));
      out.write("<span style='font-size:15px;'>&#8594;</span>\r\n");
      out.write("\t\t\t\t\t\t\t\t");
}else
								{
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t");
      out.print(rs2.getString("dest_city"));
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t");
}}
							while(rs2.next());
							
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t");
}
      out.write("\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t<td>\r\n");
      out.write("\t\t\t\t<div class=\"time\">\r\n");
      out.write("\t\t\t\t\t");

					String arr_time=rs.getString("arr_time");
					arr_time=arr_time.substring(0,arr_time.lastIndexOf(':'));
					
      out.write("\r\n");
      out.write("\t\t\t\t\t<strong>");
      out.print(arr_time);
      out.write("</strong><br>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"city\">\r\n");
      out.write("\t\t\t\t\t");
      out.print(rs.getString("dest_city"));
      out.write("\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\r\n");
      out.write("\t\t\t");

				if(disc==null)
				{
			
      out.write("\r\n");
      out.write("\t\t\t<td>\r\n");
      out.write("\t\t\t\t<div class=\"actual-price\">\r\n");
      out.write("\t\t\t\t\t<strong>&#x20b9;");
      out.print(rs.getString("price"));
      out.write("</strong>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</td>\t\r\n");
      out.write("\t\t\t");
 } else {	
      out.write("\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<div class=\"actual-price-discount\">\r\n");
      out.write("\t\t\t\t\t\t&#x20b9;");
      out.print(rs.getString("price"));
      out.write("\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t<div class=\"actual-price price-discount\">\r\n");
      out.write("\t\t\t\t\t\t<strong>&#x20b9;");
      out.print(disc_price);
      out.write("</strong>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\r\n");
      out.write("\t\t\t");
}
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t");
}
	while(rs.next());
	}
      out.write("\r\n");
      out.write("\r\n");
      out.write("</table>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
