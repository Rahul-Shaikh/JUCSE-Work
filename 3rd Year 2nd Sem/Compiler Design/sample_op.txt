Reading file keywords.txt
Reading file punctuations.txt
Reading file operators.txt
Printing tokens
Row: 1, Col: 1		int : keyword
Row: 1, Col: 5		main : identifier
Row: 1, Col: 9		( : punctuation
Row: 1, Col: 10		) : punctuation
Row: 2, Col: 1		{ : punctuation
Row: 3, Col: 5		printf : identifier
Row: 3, Col: 11		( : punctuation
Row: 3, Col: 12		" : punctuation
Row: 3, Col: 13		Hello : literal
Row: 3, Col: 18		" : punctuation
Row: 3, Col: 19		) : punctuation
Row: 3, Col: 20		; : punctuation
Row: 4, Col: 5		int : keyword
Row: 4, Col: 9		adsf : identifier
Row: 4, Col: 13		= : operator
Row: 4, Col: 14		0 : constant
Row: 4, Col: 15		; : punctuation
Row: 5, Col: 5		double : keyword
Row: 5, Col: 12		b : identifier
Row: 5, Col: 13		= : operator
Row: 5, Col: 14		3.4 : constant
Row: 5, Col: 17		; : punctuation
Row: 6, Col: 5		char : keyword
Row: 6, Col: 10		c : identifier
Row: 6, Col: 11		= : operator
Row: 6, Col: 12		' : punctuation
Row: 6, Col: 13		w : character constant
Row: 6, Col: 14		' : punctuation
Row: 6, Col: 15		; : punctuation
Row: 7, Col: 5		adsf : identifier
Row: 7, Col: 9		+= : operator
Row: 7, Col: 11		3 : constant
Row: 7, Col: 12		; : punctuation
Row: 8, Col: 5		if : keyword
Row: 8, Col: 8		( : punctuation
Row: 8, Col: 10		! : operator
Row: 8, Col: 11		a : identifier
Row: 8, Col: 12		== : operator
Row: 8, Col: 14		0 : constant
Row: 8, Col: 15		&& : operator
Row: 8, Col: 17		b : identifier
Row: 8, Col: 18		== : operator
Row: 8, Col: 20		0 : constant
Row: 8, Col: 21		) : punctuation
Row: 10, Col: 9		printf : identifier
Row: 10, Col: 15		( : punctuation
Row: 10, Col: 16		" : punctuation
Row: 10, Col: 17		Hi : literal
Row: 10, Col: 19		" : punctuation
Row: 10, Col: 20		) : punctuation
Row: 10, Col: 21		; : punctuation
Row: 11, Col: 5		return : keyword
Row: 11, Col: 12		0 : constant
Row: 11, Col: 13		; : punctuation
Row: 12, Col: 1		} : punctuation
